buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
		swaggerVersion = '2.9.0'
		javaVersion = '1.8'
	}
	repositories {
    	mavenCentral()
    	jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from : 'docker.gradle'

compileJava {
    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"
}

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
        
    tasks.withType(Test) {
       systemProperty "file.encoding", "UTF-8"
    }
}

jar {
    baseName = "demomongo"
    group    = "com.ejemplo.demo"
    version  = "0.0.1-SNAPSHOT"
    manifest { attributes "Main-Class": "com.ejemplo.demo.MongoApplication" }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile("io.springfox:springfox-swagger2:${swaggerVersion}")
	compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
	compile('org.aspectj:aspectjweaver:1.8.13')
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

test {
	useJUnitPlatform()
	ignoreFailures = false
	jacoco {
		//append = false
		destinationFile = file("jacoco/jacocoTest.exec")
	}
	reports.junitXml.destination = file("jacoco/test-results")
	testLogging.showStandardStreams = true
   	testLogging.exceptionFormat = 'full'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacocoTestReport.dependsOn(test)

plugins.withType(JacocoPlugin) {
  tasks["test"].finalizedBy 'jacocoTestReport'
}

task publish(type: GradleBuild) {
     tasks = ['clean', 'build', 'test', 'jacocoTestReport', 'jar']
}