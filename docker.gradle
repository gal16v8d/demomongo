buildscript {
	ext {
		gradleDockerVersion   = '3.2.5'
	}
	repositories {
		jcenter()
    	mavenCentral()
	}
	dependencies {
		classpath("com.bmuschko:gradle-docker-plugin:${gradleDockerVersion}")
	}
}
// use fully qualified class name
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin    

// import task classes
import com.bmuschko.gradle.docker.tasks.image.*    
import com.bmuschko.gradle.docker.tasks.container.*

def containerId

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from       'openjdk:8'
    String dockerProjFolder = project.projectDir.name
    runCommand("mkdir -p /app/springboot/${dockerProjFolder} && mkdir -p /app/springboot/${dockerProjFolder}/conf")
    addFile "demomongo.jar", "/app/springboot/${dockerProjFolder}/"
    exposePort 8080
    workingDir("/app/springboot/${dockerProjFolder}")
    entryPoint 'java', '-jar', "/app/springboot/${dockerProjFolder}/demomongo.jar"
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerfile, build
    dockerFile = createDockerfile.destFile
    inputDir = dockerFile.parentFile
    tag = "demomongo"
    doFirst {
      copy { from "$project.projectDir/build/lib" into 'build/docker' }
    }
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = jar.baseName
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8080:8080']
}

task startDockerContainer(type: DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.getContainerId() }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.getContainerId() }
}